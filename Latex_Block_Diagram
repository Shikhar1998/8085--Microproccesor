\documentclass[border=10pt]{standalone}

\usepackage{tikz}
\usetikzlibrary{shapes,arrows}
\usepackage{amsmath,bm,times}
\newcommand{\mx}[1]{\mathbf{\bm{#1}}} % Matrix command
\newcommand{\vc}[1]{\mathbf{\bm{#1}}} % Vector command

\begin{document}
\pagestyle{empty}

% We need layers to draw the block diagram
\pgfdeclarelayer{background}
\pgfdeclarelayer{foreground}
\pgfsetlayers{background,main,foreground}

% Define a few styles and constants
\tikzstyle{sensor}=[draw, fill=blue!20, text width=5em, 
    text centered, minimum height=2.5em]
\tikzstyle{ann} = [above, text width=5em]
\tikzstyle{naveqs} = [sensor, text width=6em, fill=red!20, 
    minimum height=12em, rounded corners]
\def\blockdist{4}
\def\edgedist{2.5}

\begin{tikzpicture}
    \node (naveq) [naveqs] {$8085 \mu P$};
    % Note the use of \path instead of \node at ... below. 
    \path (naveq.140)+(-\blockdist, 0) node (gyros) [sensor] {Numeric Input Pad};
    \path (naveq.-150)+(-\blockdist,0) node (accel) [sensor] {Reset Button};
    \path (naveq.140)+(0, -5) node (RAM) [sensor] {R/W Memory};
    \path (naveq.140)+(3, -5) node (ROM) [sensor] {ROM};
    
    % Unfortunately we cant use the convenient \path (fromnode) -- (tonode) 
    % syntax here. This is because TikZ draws the path from the node centers
    % and clip the path at the node boundaries. We want horizontal lines, but
    % the sensor and naveq blocks aren't aligned horizontally. Instead we use
    % the line intersection syntax |- to calculate the correct coordinate
    \path [draw, ->] (gyros) -- node [above] {Entering O/X} 
        (naveq.west |- gyros) ;
    % We could simply have written (gyros) .. (naveq.140). However, it's
    % best to avoid hard coding coordinates
    \path [draw, ->] (accel) -- node [above] {Hard Reset} 
        (naveq.west |- accel);
    \node (IMU) [below of=accel] {Input Devices};
    \path (naveq.south)+(5,-2.8) node (INS) {Output Devices};
    \path (naveq.south)+(-0.3,-0.4) node (INS) {};
    \draw [->] (naveq.40) -- node [ann] {} + (3,3) 
        node[right] {   LCD Display};
    \draw [->] (naveq.-40) -- node [ann] {} + (3,-3) 
        node[right] { 3 x 3 LED Matrix};
    
    % Now it's time to draw the colored IMU and INS rectangles.
    % To draw them behind the blocks we use pgf layers. This way we  
    % can use the above block coordinates to place the backgrounds   
    \begin{pgfonlayer}{background}
        % Compute a few helper coordinates
        \path (gyros.west |- naveq.north)+(3.4, 0.3) node (a) {};
        \path (INS.south -| naveq.east)+(+1.9,-2) node (b) {};
        \path[fill=yellow!20,rounded corners, draw=black!50, dashed]
            (a) rectangle (b);
        \path (gyros.north west)+(-0.2,0.2) node (a) {};
        \path (IMU.south -| gyros.east)+(+0.2,-0.2) node (b) {};
        \path[fill=blue!10,rounded corners, draw=black!50, dashed]
            (a) rectangle (b);
        \path (naveq.north east)+(2.2,2.2) node (a) {};
        \path (naveq.south -| gyros.east)+(+11.2,-3.2) node (b) {};
        \path[fill=blue!10,rounded corners, draw=black!50, dashed]
            (a) rectangle (b);
    \end{pgfonlayer}
\end{tikzpicture}

\end{document}
